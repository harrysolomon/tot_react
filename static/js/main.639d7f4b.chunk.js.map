{"version":3,"sources":["components/Overview.js","components/final_results.js","components/testing_form_options.js","index.js"],"names":["Overview","props","state","tiles","axios","get","then","res","data","setState","Container","fluid","className","Row","this","map","item","Col","md","src","scenario_icon","alt","scenario_type","scenario_description","href","scenario_icon_owner_link","title","scenario_icon_owner","Component","FinalResult","onOpenTask","e","prevState","open","handleSearchInputChange","i","variable_filter","encodeURI","url","concat","Promise","all","fetch","res1","json","data1","search_result","handleSearchChange","selectedOptions","length","search_detail","index","form_inputs","findIndex","x","_id","dependent_id","values","col_ref","onSubmitTask","requestOptions","method","headers","body","JSON","stringify","options","data_loaded","FormGroup","htmlFor","id","defaultInputValue","labelKey","placeholder","onInputChange","_","debounce","onChange","onClear","selected","onClick","hidden","form_id","key","form_name","InputGroup","FormControl","name","type","value","handleChange","bind","default_value","aria-describedby","Append","Text","Button","variant","size","aria-controls","aria-expanded","block","Collapse","in","event","target","res2","res3","res4","data2","data3","data4","console","log","Card","role","aria-labelledby","datasetKeyProvider","btoa","Math","random","substring","sm","Header","Body","createSearch","createForm","Accordion","Footer","TestingFormInput","keyCount","getKey","items","row_index","inputs","col_index","row","col","ReactDOM","render","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.639d7f4b.chunk.js","sourcesContent":["\n//there will be an input field and a submit button\n//contents in the input field should register in an html list after being submitted\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nclass Overview extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            //error: null,\n            //isLoaded: false,\n            tiles: []\n        };\n    }\n\ncomponentDidMount() {\n    axios.get(`http://localhost:3000`)\n      .then(res => {\n        const tiles = res.data;\n        this.setState({ tiles });\n      })\n  }\n\nrender() {\n  return (\n    <Container fluid=\"true\">\n        <div className=\"page-header\">\n            <div className =\"row align-items-center\">\n                <div className=\"col-sm mb-2 mb-sm-0\">\n                    <h1 className=\"page-header-title\">This or That?</h1>\n                </div>\n            </div>\n        </div>\n        <Row>\n            {this.state.tiles.map(item => (\n                <Col md={4}>\n                    <div className=\"card card-hover-shadow\">\n                        <div className=\"card-body card-body-height\">\n                            <div className=\"card-body-centered\">\n                                <img className=\"avatar avatar-xxl mb-3\" src={item.scenario_icon} alt=\"Image Description\">\n                                </img>\n                            </div>\n                            <h3 className=\"card-title\">{item.scenario_type}</h3>\n                            <p className=\"card-text\">{item.scenario_description}</p>\n                            <p className=\"card-text\">\n                                <small className=\"text-muted\">Icons made by\n                                    <a href={item.scenario_icon_owner_link} title={item.scenario_icon_owner}>{item.scenario_icon_owner}</a> from \n                                    <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a>\n                                </small>\n                            </p>\n                            <a href=\"/5fac52be03ff66099d9a8ef4\" className=\"stretched-link\"></a>\n                        </div>\n                    </div>\n                </Col>\n            ))}\n            \n        </Row>\n    </Container>\n  );\n};\n\n}\n\nexport default Overview;\n","import React, { Component, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Card, FormControl, InputGroup, FormGroup, Container, Row, Col, Button, Collapse, Spinner } from \"react-bootstrap\";\nimport { Typeahead, ClearButton } from 'react-bootstrap-typeahead';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport _ from 'lodash'\n\n\n\n\nclass FinalResult extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          form_inputs: [],\n          data_loaded: false,\n          open: false,\n          data: {},\n          options: {},\n          search_result: [],\n          search_detail: []\n      };\n\n    //creates the list of inputs that are displayed upfront to the user\n    }\n    \n    createSearch(){\n        return(\n            <FormGroup>\n                <label htmlFor=\"search\">{this.state.search_detail[0][\"search_name\"]}\n                </label>\n                <Typeahead\n                    id=\"onclear-example\"\n                    defaultInputValue={this.state.search_detail[0][\"default_value\"]}\n                    labelKey={this.state.search_detail[0][\"label_key\"]}\n                    options={this.state.search_result}\n                    placeholder=\"Choose a College...\"\n                    onInputChange={_.debounce(this.handleSearchInputChange,300)}\n                    onChange={this.handleSearchChange}>\n                    {({ onClear, selected }) => (\n                    <div className=\"rbt-aux\">\n                        {!!selected.length && <ClearButton onClick={onClear} />}\n                        {/*{!selected.length && <Spinner animation=\"grow\" size=\"sm\" />}*/}\n                    </div>\n                    )}\n                </Typeahead>\n            </FormGroup>\n        )\n    }\n                        \n    \n    createForm(){\n        return(\n            <div>\n                {\n                    this.state.form_inputs.map((item,i) => {\n                        //console.log(this.state.form_inputs.find(x => x.form_id == \"search\"))\n                        if(!item.hidden && item.form_id !== \"search\") {\n                            return(\n                            <FormGroup key={i}>\n                            <label htmlFor={item.form_id}>{item.form_name}\n                            </label>\n                            <InputGroup>\n                                <FormControl \n                                    name={item.form_id} \n                                    type=\"text\" \n                                    id={item.form_id} \n                                    value={item.state||''} \n                                    onChange={this.handleChange.bind(this, i)} \n                                    placeholder={item.default_value} \n                                    aria-describedby=\"basic-addon2\"/>\n                                <InputGroup.Append>\n                                    <InputGroup.Text id=\"basic-addon2\">%</InputGroup.Text>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </FormGroup>);}\n                    })\n                }\n            </div>\n        ); \n     }\n\n     //creates the list of inputs that are hidden initially from the user\n     Accordion() {\n        //Need some added padding below the additional inputs button\n        return (\n                    <>\n                    <Button \n                        variant=\"light\" \n                        size=\"lg\" \n                        onClick={this.onOpenTask}\n                        aria-controls=\"example-collapse-text\"\n                        aria-expanded={this.state.open}\n                        block\n                    >\n                        Additional Inputs\n                    </Button>\n                    <Collapse in={this.state.open}>\n                        <div>\n                            {\n                                this.state.form_inputs.map((item,i) => {\n                                    if(item.hidden && item.form_id !== \"search\") {\n                                        return(\n                                            <FormGroup key={i}>\n                                                <label htmlFor={item.form_id}>{item.form_name}\n                                                </label>\n                                                <InputGroup>\n                                                    <FormControl\n                                                        name={item.form_id} \n                                                        type=\"text\" id={item.form_id} \n                                                        value={item.state||''} \n                                                        onChange={this.handleChange.bind(this, i)} \n                                                        placeholder={item.default_value} \n                                                        aria-describedby=\"basic-addon2\"\n                                                    />\n                                                    <InputGroup.Append>\n                                                        <InputGroup.Text id=\"basic-addon2\">%</InputGroup.Text>\n                                                    </InputGroup.Append>\n                                                </InputGroup>\n                                            </FormGroup>\n                                        );\n                                    }\n                                })\n                            }\n                        </div>\n                    </Collapse>\n                    </>\n        );\n    }\n\n    onOpenTask = (e) => {\n        //This is the open action for the additional input accordion\n        this.setState(prevState => ({\n            open: !prevState.open\n          }));\n    }\n\n    handleSearchInputChange = (i) => {\n        //I should have some data to start with via the component did mount function instead of a no results found field\n        //Need to add the text search string. The search is case insensitive so that's great! But something to consider next go-around\n        \n        let main = 'https://api.data.gov/ed/collegescorecard/v1/schools.json?'\n        let api_key = 'api_key=ro4hAT4oZs4MhyZDBrAqSEmg3vYCQOTJ2wAT0OEP'\n        let fixed_filter = '&school.degrees_awarded.predominant=2,3&school.name='\n        let variable_filter = encodeURI(i)\n        let fields = '&fields=school.name,latest.cost.tuition.in_state,latest.cost.tuition.out_of_state'\n        let url = main.concat(api_key,fixed_filter,variable_filter,fields)\n\n        Promise.all([\n            fetch(url)\n        ])\n        .then(([res1]) => Promise.all([res1.json()]))\n        .then(([data1]) => this.setState({\n            search_result: data1[\"results\"]\n        }))\n\n        //need to think about encoding for words with spaces\n      }\n\n    handleSearchChange = (selectedOptions) => {\n        //some schools do not have out of state tuition prices. How shall we handle?\n        //This loops through all of the search details and maps the result from the search to its dependent form input id\n        \n        if(selectedOptions.length !== 0) {\n            this.state.search_detail[0][\"dependencies\"].map((item) => {\n                let index = this.state.form_inputs.findIndex(x => x._id === item.dependent_id);\n                let values = [...this.state.form_inputs];\n                    values[index].state = selectedOptions[0][item.col_ref]\n                this.setState({ values })\n\n            })\n        }\n        \n    }\n//this is for all the inputs besides the search bar\n     handleChange(i, event) {\n        let values = [...this.state.form_inputs];\n\n        values[i].state = event.target.value;\n        this.setState({ values });\n     }\n    \n    onSubmitTask = (e) => {\n        const requestOptions = {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(this.state.form_inputs)\n        };\n\n        Promise.all([\n            fetch('http://localhost:3000/5fac52be03ff66099d9a8ef4/line_chart',requestOptions)\n        ])\n        .then(([res1]) => Promise.all([res1.json()]))\n        .then(([data1]) => this.setState({\n            data: data1[\"data\"],\n            options: data1[\"options\"],\n        }))\n    }\n\n    componentDidMount() {\n\n        const requestOptions = {\n            method: \"POST\"\n        };\n\n        Promise.all([\n            fetch(`http://localhost:3000/5fac52be03ff66099d9a8ef4`),\n            fetch('http://localhost:3000/5fac52be03ff66099d9a8ef4/line_chart',requestOptions),\n            fetch('https://api.data.gov/ed/collegescorecard/v1/schools.json?api_key=ro4hAT4oZs4MhyZDBrAqSEmg3vYCQOTJ2wAT0OEP&school.degrees_awarded.predominant=2,3&school.main_campus=1&fields=school.name,latest.cost.tuition.in_state,latest.cost.tuition.out_of_state'),\n            fetch('http://localhost:3000/5fac52be03ff66099d9a8ef4/search_detail')\n        ])\n        .then(([res1, res2, res3, res4]) => Promise.all([res1.json(), res2.json(), res3.json(), res4.json()]))\n        .then(([data1, data2, data3, data4]) => this.setState({\n            form_inputs: data1,\n            data: data2[\"data\"],\n            options: data2[\"options\"],\n            data_loaded: true,\n            search_result: data3[\"results\"],\n            search_detail: data4\n\n        }))\n    }\n\n\nrender() {\n\n// React Chart js requirement for having each dataset be represented by a unique key\n    const datasetKeyProvider=()=>{ \n        return btoa(Math.random()).substring(0,12)\n    } \n    console.log(this.state.search_detail)\n    if(this.state.data_loaded) {\n        return( \n            <Container fluid>\n                    {/*}\n                    <Link to=\"/\">\n                        <div className=\"page-header\">\n                            <div className =\"row align-items-center\">\n                                <div className=\"col-sm mb-2 mb-sm-0\">\n                                    <h1 className=\"page-header-title\">This or That?</h1>\n                                </div>\n                            </div>\n                        </div>\n                    </Link>*/}\n                    \n                    <section className=\"jumbotron text-center\">\n                        <div className=\"container\">\n                            <p className=\"lead text-muted\">According to BLS, great investment!</p>\n                        </div>\n                    </section>\n                    {/* start of second row*/}\n                    <Row>\n                        {/*Line Chart*/}\n                        <Col md={8}>\n                            <Card>\n                                <div className=\"tab-content\" id=\"navTabContent1\">\n                                    <div className=\"tab-pane fade p-4 show active\" id=\"nav-result1\" role=\"tabpanel\" aria-labelledby=\"nav-resultTab1\">\n                                        {/*Chart Legends*/}\n                                        <div className=\"row align-items-sm-center mb-4\">\n                                            <div className=\"col-sm mb-3 mb-sm-0\"></div>\n                                            <div className=\"col-sm-auto\">\n                                                <div className=\"row font-size-sm\">\n                                                    <div className=\"col-auto\">\n                                                        <span className=\"legend-indicator bg-primary\"></span> Bachelors Degree\n                                                    </div>\n                                        \n                                                    <div className=\"col-auto\">\n                                                        <span className=\"legend-indicator bg-info\"></span> High School Diploma\n                                                    </div>\n                                                </div>\n                                            </div>\n                                         </div>\n                                \n                                        <Line data={this.state.data} datasetKeyProvider={datasetKeyProvider} options={this.state.options}/>\n                                    </div>\n                                </div>\n                            </Card>\n                        </Col>\n\n                        {/*Chart End*/}\n\n                        <Col sm={4}>\n                            <Card>\n                                <Card.Header>\n                                    Bachelors Degree\n                                </Card.Header>\n                                <Card.Body>\n                                    {this.createSearch()}\n                                    {this.createForm()}\n                                    {this.Accordion()}\n                                    <Card.Footer>\n                                        <Button variant=\"primary\" onClick={this.onSubmitTask}>\n                                            Submit\n                                        </Button>\n                                    </Card.Footer>\n                                </Card.Body>\n                                \n                            </Card>\n                        </Col>\n                    </Row>\n            </Container>\n        );\n    } else {\n        return (\n            <div>\n            </div>\n        )}\n}\n}\n\nexport default FinalResult;\n        ","import React, { Component, useState } from \"react\";\nimport { Link } from 'react-router-dom';\nimport { Line } from 'react-chartjs-2';\nimport { Card, FormControl, InputGroup, FormGroup, Container, Row, Col, Button, Collapse, Spinner } from \"react-bootstrap\";\nimport { Typeahead, ClearButton } from 'react-bootstrap-typeahead';\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\nimport _ from 'lodash'\n\n\n\n\nclass TestingFormInput extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n          form_inputs: [],\n          data_loaded: false,\n          open: false,\n          data: {},\n          options: {},\n          search_result: [],\n          search_detail: [],\n      };\n      \n      this.keyCount = 0\n      this.getKey = this.getKey.bind(this)\n\n    //creates the list of inputs that are displayed upfront to the user\n    }\n\n    getKey(){\n        return this.keyCount++;\n    }\n    \n    createSearch(){\n        return(\n            <FormGroup>\n                <label htmlFor=\"search\">{this.state.search_detail[0][\"search_name\"]}\n                </label>\n                <Typeahead\n                    id=\"onclear-example\"\n                    defaultInputValue={this.state.search_detail[0][\"default_value\"]}\n                    labelKey={this.state.search_detail[0][\"label_key\"]}\n                    options={this.state.search_result}\n                    placeholder=\"Choose a College...\"\n                    onInputChange={_.debounce(this.handleSearchInputChange,300)}\n                    onChange={this.handleSearchChange}>\n                    {({ onClear, selected }) => (\n                    <div className=\"rbt-aux\">\n                        {!!selected.length && <ClearButton onClick={onClear} />}\n                        {/*{!selected.length && <Spinner animation=\"grow\" size=\"sm\" />}*/}\n                    </div>\n                    )}\n                </Typeahead>\n            </FormGroup>\n        )\n    }\n                        \n    \n    createForm(){\n        return(\n            <div>\n                \n                {\n                    this.state.form_inputs.map((items,row_index) => {\n                        //console.log(this.state.form_inputs.find(x => x.form_id == \"search\"))\n                        //console.log(row_index)\n                        return(\n                        <Row key={row_index}>\n                            {\n                                items.inputs.map((item,col_index) => {\n                                    //need to come up with a way to give each input a unique key for the handle change event\n                                    let key = this.getKey()\n                                    //console.log(key);\n                                    return(\n                                        <Col key={col_index}>\n                                            <FormGroup key={col_index}>\n                                                <label htmlFor={item.form_id}>{item.form_name}\n                                                </label>\n                                                <InputGroup>\n                                                    <FormControl \n                                                        name={item.form_id} \n                                                        type=\"text\" \n                                                        id={item.form_id} \n                                                        value={item.state||''} \n                                                        onChange={this.handleChange.bind(this, row_index, col_index)} \n                                                        placeholder={item.default_value} \n                                                        aria-describedby=\"basic-addon2\"/>\n                                                    <InputGroup.Append>\n                                                        <InputGroup.Text id=\"basic-addon2\">{item.type}</InputGroup.Text>\n                                                    </InputGroup.Append>\n                                                </InputGroup>\n                                            </FormGroup>\n                                        </Col>\n                                    )\n                                })\n                                \n                            }\n                        </Row>)\n                        \n                    })\n                }\n            </div>\n        ); \n     }\n\n     //creates the list of inputs that are hidden initially from the user\n     /*Accordion() {\n        //Need some added padding below the additional inputs button\n        return (\n                    <>\n                    <Button \n                        variant=\"light\" \n                        size=\"lg\" \n                        onClick={this.onOpenTask}\n                        aria-controls=\"example-collapse-text\"\n                        aria-expanded={this.state.open}\n                        block\n                    >\n                        Additional Inputs\n                    </Button>\n                    <Collapse in={this.state.open}>\n                        <div>\n                            {\n                                this.state.form_inputs.map((item,i) => {\n                                    if(item.hidden && item.form_id !== \"search\") {\n                                        return(\n                                            <FormGroup key={i}>\n                                                <label htmlFor={item.form_id}>{item.form_name}\n                                                </label>\n                                                <InputGroup>\n                                                    <FormControl\n                                                        name={item.form_id} \n                                                        type=\"text\" id={item.form_id} \n                                                        value={item.state||''} \n                                                        onChange={this.handleChange.bind(this, i)} \n                                                        placeholder={item.default_value} \n                                                        aria-describedby=\"basic-addon2\"\n                                                    />\n                                                    <InputGroup.Append>\n                                                        <InputGroup.Text id=\"basic-addon2\">%</InputGroup.Text>\n                                                    </InputGroup.Append>\n                                                </InputGroup>\n                                            </FormGroup>\n                                        );\n                                    }\n                                })\n                            }\n                        </div>\n                    </Collapse>\n                    </>\n        );\n    }*/\n\n    onOpenTask = (e) => {\n        //This is the open action for the additional input accordion\n        this.setState(prevState => ({\n            open: !prevState.open\n          }));\n    }\n\n    handleSearchInputChange = (i) => {\n        //I should have some data to start with via the component did mount function instead of a no results found field\n        //Need to add the text search string. The search is case insensitive so that's great! But something to consider next go-around\n        \n        let main = 'https://api.data.gov/ed/collegescorecard/v1/schools.json?'\n        let api_key = 'api_key=ro4hAT4oZs4MhyZDBrAqSEmg3vYCQOTJ2wAT0OEP'\n        let fixed_filter = '&school.degrees_awarded.predominant=2,3&school.name='\n        let variable_filter = encodeURI(i)\n        let fields = '&fields=school.name,latest.cost.tuition.in_state,latest.cost.tuition.out_of_state'\n        let url = main.concat(api_key,fixed_filter,variable_filter,fields)\n\n        Promise.all([\n            fetch(url)\n        ])\n        .then(([res1]) => Promise.all([res1.json()]))\n        .then(([data1]) => this.setState({\n            search_result: data1[\"results\"]\n        }))\n\n        //need to think about encoding for words with spaces\n      }\n\n    handleSearchChange = (selectedOptions) => {\n        //some schools do not have out of state tuition prices. How shall we handle?\n        //This loops through all of the search details and maps the result from the search to its dependent form input id\n        \n        if(selectedOptions.length !== 0) {\n            this.state.search_detail[0][\"dependencies\"].map((item) => {\n                let index = this.state.form_inputs.findIndex(x => x._id === item.dependent_id);\n                let values = [...this.state.form_inputs];\n                    values[index].state = selectedOptions[0][item.col_ref]\n                this.setState({ values })\n\n            })\n        }\n        \n    }\n//this is for all the inputs besides the search bar\n    handleChange(row, col, event) {\n        \n        let values = [...this.state.form_inputs];\n        values[row].inputs[col].state = event.target.value;\n        \n        this.setState({ values });\n    }\n    \n    onSubmitTask = (e) => {\n        const requestOptions = {\n            method: \"POST\",\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(this.state.form_inputs)\n        };\n\n        Promise.all([\n            fetch('http://localhost:3000/5fac52be03ff66099d9a8ef4/line_chart',requestOptions)\n        ])\n        .then(([res1]) => Promise.all([res1.json()]))\n        .then(([data1]) => this.setState({\n            data: data1[\"data\"],\n            options: data1[\"options\"],\n        }))\n    }\n\n    componentDidMount() {\n\n        const requestOptions = {\n            method: \"POST\"\n        };\n\n        Promise.all([\n            fetch(`http://localhost:3000/5fac52be03ff66099d9a8ef4/test_input`),\n            fetch('http://localhost:3000/5fac52be03ff66099d9a8ef4/line_chart',requestOptions),\n            fetch('https://api.data.gov/ed/collegescorecard/v1/schools.json?api_key=ro4hAT4oZs4MhyZDBrAqSEmg3vYCQOTJ2wAT0OEP&school.degrees_awarded.predominant=2,3&school.main_campus=1&fields=school.name,latest.cost.tuition.in_state,latest.cost.tuition.out_of_state'),\n            fetch('http://localhost:3000/5fac52be03ff66099d9a8ef4/search_detail')\n        ])\n        .then(([res1, res2, res3, res4]) => Promise.all([res1.json(), res2.json(), res3.json(), res4.json()]))\n        .then(([data1, data2, data3, data4]) => this.setState({\n            form_inputs: data1,\n            data: data2[\"data\"],\n            options: data2[\"options\"],\n            data_loaded: true,\n            search_result: data3[\"results\"],\n            search_detail: data4\n\n        }))\n    }\n\n\nrender() {\n\n// React Chart js requirement for having each dataset be represented by a unique key\n    const datasetKeyProvider=()=>{ \n        return btoa(Math.random()).substring(0,12)\n    } \n    //console.log(this.state.form_inputs)\n    if(this.state.data_loaded) {\n        return( \n            <Container fluid>\n                    {/*}\n                    <Link to=\"/\">\n                        <div className=\"page-header\">\n                            <div className =\"row align-items-center\">\n                                <div className=\"col-sm mb-2 mb-sm-0\">\n                                    <h1 className=\"page-header-title\">This or That?</h1>\n                                </div>\n                            </div>\n                        </div>\n                    </Link>*/}\n                    \n                    <section className=\"jumbotron text-center\">\n                        <div className=\"container\">\n                            <p className=\"lead text-muted\">According to BLS, great investment!</p>\n                        </div>\n                    </section>\n                    {/* start of second row*/}\n                    <Row>\n                        {/*Line Chart*/}\n                        <Col md={8}>\n                            <Card>\n                                <div className=\"tab-content\" id=\"navTabContent1\">\n                                    <div className=\"tab-pane fade p-4 show active\" id=\"nav-result1\" role=\"tabpanel\" aria-labelledby=\"nav-resultTab1\">\n                                        {/*Chart Legends*/}\n                                        <div className=\"row align-items-sm-center mb-4\">\n                                            <div className=\"col-sm mb-3 mb-sm-0\"></div>\n                                            <div className=\"col-sm-auto\">\n                                                <div className=\"row font-size-sm\">\n                                                    <div className=\"col-auto\">\n                                                        <span className=\"legend-indicator bg-primary\"></span> Bachelors Degree\n                                                    </div>\n                                        \n                                                    <div className=\"col-auto\">\n                                                        <span className=\"legend-indicator bg-info\"></span> High School Diploma\n                                                    </div>\n                                                </div>\n                                            </div>\n                                         </div>\n                                \n                                        <Line data={this.state.data} datasetKeyProvider={datasetKeyProvider} options={this.state.options}/>\n                                    </div>\n                                </div>\n                            </Card>\n                        </Col>\n\n                        {/*Chart End*/}\n\n                        <Col sm={4}>\n                            <Card>\n                                <Card.Header>\n                                    Bachelors Degree\n                                </Card.Header>\n                                <Card.Body>\n                                    {this.createSearch()}\n                                    {this.createForm()}\n                                    \n                                    <Card.Footer>\n                                        <Button variant=\"primary\" onClick={this.onSubmitTask}>\n                                            Submit\n                                        </Button>\n                                    </Card.Footer>\n                                </Card.Body>\n                                \n                            </Card>\n                        </Col>\n                    </Row>\n            </Container>\n        );\n    } else {\n        return (\n            <div>\n            </div>\n        )}\n}\n}\n\nexport default TestingFormInput;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Overview from './components/Overview';\nimport FinalResult from './components/final_results';\nimport TestingFormInput from './components/testing_form_options';\n\n\nReactDOM.render(\n  <Router>\n    <div>\n      <Route exact path=\"/\" component={Overview} />\n      <Route path=\"/5fac52be03ff66099d9a8ef4\" component={FinalResult} />\n      <Route path=\"/testing\" component={TestingFormInput} />\n    </div>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}